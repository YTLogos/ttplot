l <- LDheatmap(f1, genetic.distances = dist,color = grey.colors(20))
LDheatmap(l,color = rgb.palette(100), flip = TRUE)
snpMat <- function(vcffile){
if(!require(vcfR)) BiocManager::install("vcfR")
if(!require(snpStats)) BiocManager::install("snpStats")
if(!require(genetics)) BiocManager::install("genetics")
require(vcfR)
require(snpStats)
snp <- read.vcfR(vcffile, verbose = FALSE)
snp_gt <- snp@gt
snp_gt <- as.data.frame(snp_gt[,-1])
info <- as.data.frame(snp@fix)
info$ID <- paste(info$CHROM,info$POS,sep = "_")
snp_data <- cbind(info[,c(4,5)],snp_gt)
snp_data[,1:ncol(snp_data)] <- lapply(snp_data[,1:ncol(snp_data)], as.character)
for (i in 1:nrow(snp_data)){
for (j in 3:ncol(snp_data)){
if (is.na(snp_data[i,j])){
snp_data[i,j] <- NA
}else if (snp_data[i,j]=="0/0"){
snp_data[i,j] <- paste(snp_data[i,1],snp_data[i,1], sep = "/")
}else if (snp_data[i,j]=="0/1"){
snp_data[i,j] <- paste(snp_data[i,1],snp_data[i,2], sep = "/")
}else if (snp_data[i,j]=="1/1"){
snp_data[i,j] <- paste(snp_data[i,2],snp_data[i,2], sep = "/")
}
}
}
snpMat <- t(snp_data[,-c(1,2)])
info <- snpInfo(vcffile)
snpNames <- info$ID
colnames(snpMat) <- snpNames
rownames(snpMat) <- NULL
snpMat <- as.data.frame(snpMat)
for (i in 1:ncol(snpMat)){
snpMat[, i] <- genetics::as.genotype(snpMat[, i])
}
return(snpMat)
}
snpInfo()
snpInfo
snpMat <- function(vcffile){
if(!require(vcfR)) BiocManager::install("vcfR")
if(!require(snpStats)) BiocManager::install("snpStats")
if(!require(genetics)) BiocManager::install("genetics")
require(vcfR)
require(snpStats)
snp <- read.vcfR(vcffile, verbose = FALSE)
snp_gt <- snp@gt
snp_gt <- as.data.frame(snp_gt[,-1])
info <- as.data.frame(snp@fix)
info$ID <- paste(info$CHROM,info$POS,sep = "_")
snp_data <- cbind(info[,c(4,5)],snp_gt)
snp_data[,1:ncol(snp_data)] <- lapply(snp_data[,1:ncol(snp_data)], as.character)
for (i in 1:nrow(snp_data)){
for (j in 3:ncol(snp_data)){
if (is.na(snp_data[i,j])){
snp_data[i,j] <- NA
}else if (snp_data[i,j]=="0/0"){
snp_data[i,j] <- paste(snp_data[i,1],snp_data[i,1], sep = "/")
}else if (snp_data[i,j]=="0/1"){
snp_data[i,j] <- paste(snp_data[i,1],snp_data[i,2], sep = "/")
}else if (snp_data[i,j]=="1/1"){
snp_data[i,j] <- paste(snp_data[i,2],snp_data[i,2], sep = "/")
}
}
}
snpMat <- t(snp_data[,-c(1,2)])
info <- snpInfo(vcffile)
snpNames <- info$ID
colnames(snpMat) <- snpNames
rownames(snpMat) <- NULL
snpMat <- as.data.frame(snpMat)
for (i in 1:ncol(snpMat)){
snpMat[, i] <- genetics::as.genotype(snpMat[, i])
}
return(snpMat)
}
snp <- read.vcfR("/mypackages/sample1_snp.vcf", verbose = FALSE)
snp_gt <- snp@gt
snp_gt <- as.data.frame(snp_gt[,-1])
info <- as.data.frame(snp@fix)
info$ID <- paste(info$CHROM,info$POS,sep = "_")
snp_data <- cbind(info[,c(4,5)],snp_gt)
snp_data[,1:ncol(snp_data)] <- lapply(snp_data[,1:ncol(snp_data)], as.character)
for (i in 1:nrow(snp_data)){
for (j in 3:ncol(snp_data)){
if (is.na(snp_data[i,j])){
snp_data[i,j] <- NA
}else if (snp_data[i,j]=="0/0"){
snp_data[i,j] <- paste(snp_data[i,1],snp_data[i,1], sep = "/")
}else if (snp_data[i,j]=="0/1"){
snp_data[i,j] <- paste(snp_data[i,1],snp_data[i,2], sep = "/")
}else if (snp_data[i,j]=="1/1"){
snp_data[i,j] <- paste(snp_data[i,2],snp_data[i,2], sep = "/")
}
}
}
snpMat <- t(snp_data[,-c(1,2)])
info <- snpInfo("/mypackages/sample1_snp.vcf")
snpNames <- info$ID
colnames(snpMat) <- snpNames
rownames(snpMat) <- NULL
snpMat <- as.data.frame(snpMat)
for (i in 1:ncol(snpMat)){
snpMat[, i] <- genetics::as.genotype(snpMat[, i])
}
snpMat[2,3]
#' Get the snpMatrix from the vcf file (plink format)
#'
#' This function defined to obtain the snpMatrix(with snp ID) from the vcf file
#' @param vcffile The vcf file (plink format).
#' @return The snpMAtrix for the visulization of LDheatmap.
#' @export
#' @examples
#' snpMat(vcffile)
snpMat <- function(vcffile){
if(!require(vcfR)) BiocManager::install("vcfR")
if(!require(snpStats)) BiocManager::install("snpStats")
if(!require(genetics)) BiocManager::install("genetics")
require(vcfR)
require(snpStats)
snp <- read.vcfR(vcffile, verbose = FALSE)
snp_gt <- snp@gt
snp_gt <- as.data.frame(snp_gt[,-1])
info <- as.data.frame(snp@fix)
info$ID <- paste(info$CHROM,info$POS,sep = "_")
snp_data <- cbind(info[,c(4,5)],snp_gt)
snp_data[,1:ncol(snp_data)] <- lapply(snp_data[,1:ncol(snp_data)], as.character)
for (i in 1:nrow(snp_data)){
for (j in 3:ncol(snp_data)){
if (is.na(snp_data[i,j])){
snp_data[i,j] <- NA
}else if (snp_data[i,j]=="0/0"){
snp_data[i,j] <- paste(snp_data[i,1],snp_data[i,1], sep = "/")
}else if (snp_data[i,j]=="0/1"){
snp_data[i,j] <- paste(snp_data[i,1],snp_data[i,2], sep = "/")
}else if (snp_data[i,j]=="1/1"){
snp_data[i,j] <- paste(snp_data[i,2],snp_data[i,2], sep = "/")
}
}
}
snpMat <- t(snp_data[,-c(1,2)])
info <- snpInfo(vcffile)
snpNames <- info$ID
colnames(snpMat) <- snpNames
rownames(snpMat) <- NULL
snpMat <- as.data.frame(snpMat)
for (i in 1:ncol(snpMat)){
snpMat[, i] <- genetics::as.genotype(snpMat[, i])
}
return(snpMat)
}
rm(list=ls())
#' Get the snpMatrix from the vcf file (plink format)
#'
#' This function defined to obtain the snpMatrix(with snp ID) from the vcf file
#' @param vcffile The vcf file (plink format).
#' @return The snpMAtrix for the visulization of LDheatmap.
#' @export
#' @examples
#' snpMat(vcffile)
snpMat <- function(vcffile){
if(!require(vcfR)) BiocManager::install("vcfR")
if(!require(snpStats)) BiocManager::install("snpStats")
if(!require(genetics)) BiocManager::install("genetics")
require(vcfR)
require(snpStats)
snp_data <- read.vcfR(vcffile, verbose = FALSE)
snp_gt <- snp_data@gt
snp_gt <- as.data.frame(snp_data[,-1])
info <- as.data.frame(snp_data@fix)
info$ID <- paste(info$CHROM,info$POS,sep = "_")
snp_geno <- cbind(info[,c(4,5)],snp_gt)
snp_geno[,1:ncol(snp_genp=o)] <- lapply(snp_geno[,1:ncol(snp_geno)], as.character)
for (i in 1:nrow(snp_geno)){
for (j in 3:ncol(snp_geno)){
if (is.na(snp_data[i,j])){
snp_geno[i,j] <- NA
}else if (snp_geno[i,j]=="0/0"){
snp_geno[i,j] <- paste(snp_geno[i,1],snp_geno[i,1], sep = "/")
}else if (snp_geno[i,j]=="0/1"){
snp_geno[i,j] <- paste(snp_geno[i,1],snp_geno[i,2], sep = "/")
}else if (snp_geno[i,j]=="1/1"){
snp_geno[i,j] <- paste(snp_geno[i,2],snp_geno[i,2], sep = "/")
}
}
}
snpMat <- t(snp_geno[,-c(1,2)])
snpNames <- info$ID
colnames(snpMat) <- snpNames
rownames(snpMat) <- NULL
snpMat <- as.data.frame(snpMat)
for (i in 1:ncol(snpMat)){
snpMat[, i] <- genetics::as.genotype(snpMat[, i])
}
return(snpMat)
}
#' Get the snpMatrix from the vcf file (plink format)
#'
#' This function defined to obtain the snpMatrix(with snp ID) from the vcf file
#' @param vcffile The vcf file (plink format).
#' @return The snpMAtrix for the visulization of LDheatmap.
#' @export
#' @examples
#' getsnpMat(vcffile)
getsnpMat <- function(vcffile){
if(!require(vcfR)) BiocManager::install("vcfR")
if(!require(snpStats)) BiocManager::install("snpStats")
if(!require(genetics)) BiocManager::install("genetics")
require(vcfR)
require(snpStats)
snp_data <- read.vcfR(vcffile, verbose = FALSE)
snp_gt <- snp_data@gt
snp_gt <- as.data.frame(snp_data[,-1])
info <- as.data.frame(snp_data@fix)
info$ID <- paste(info$CHROM,info$POS,sep = "_")
snp_geno <- cbind(info[,c(4,5)],snp_gt)
snp_geno[,1:ncol(snp_genp=o)] <- lapply(snp_geno[,1:ncol(snp_geno)], as.character)
for (i in 1:nrow(snp_geno)){
for (j in 3:ncol(snp_geno)){
if (is.na(snp_data[i,j])){
snp_geno[i,j] <- NA
}else if (snp_geno[i,j]=="0/0"){
snp_geno[i,j] <- paste(snp_geno[i,1],snp_geno[i,1], sep = "/")
}else if (snp_geno[i,j]=="0/1"){
snp_geno[i,j] <- paste(snp_geno[i,1],snp_geno[i,2], sep = "/")
}else if (snp_geno[i,j]=="1/1"){
snp_geno[i,j] <- paste(snp_geno[i,2],snp_geno[i,2], sep = "/")
}
}
}
snpMat <- t(snp_geno[,-c(1,2)])
snpNames <- info$ID
colnames(snpMat) <- snpNames
rownames(snpMat) <- NULL
snpMat <- as.data.frame(snpMat)
for (i in 1:ncol(snpMat)){
snpMat[, i] <- genetics::as.genotype(snpMat[, i])
}
return(snpMat)
}
#' Get the LDhaetmap from the vcf file (plink format)
#'
#' This function defined to obtain the LDheatmap from the vcf file directly.
#' @param vcffile The plink format vcf file.
#' @return the LDheatmap.
#' @export
#' @examples
#' MyLDheatMap(vcffile)
MyLDheatMap <- function(vcffile){
if(!require(LDheatmap)) BiocManager::install("LDheatmap")
require(LDheatmap)
name <- basename(vcffile)
title <- sub(".vcf","",name)
gdat_snp <- ttplot::getsnpMat(vcffile)
info <- ttplot::snpInfo(vcffile)
snp_dist <- as.numeric(as.character(info$POS))
rgb.palette <- colorRampPalette(rev(c("yellow","red")), space="rgb")
MyHeatmap <- LDheatmap(gdat_snp,
genetic.distances = info$POS,
color = grey.colors(20))
myLDheatmap <- LDheatmap(MyHeatmap,
color = rgb.palette(100),
flip = TRUE,
title = paste0("The LDheatmap of ",title))
}
getwd()
devtools::load_all(".")
devtools::document()
remove.packages("ttplot")
q()
getwd()
setwd("..")
remove.packages("ttplot")
library(ttplot)
devtools::install_github("YTLogos/ttplot")
ttplot::MyLDheatMap("sample1_snp.vcf")
#' Get the LDhaetmap from the vcf file (plink format)
#'
#' This function defined to obtain the LDheatmap from the vcf file directly.
#' @param vcffile The plink format vcf file.
#' @return the LDheatmap.
#' @export
#' @examples
#' MyLDheatMap(vcffile)
MyLDheatMap <- function(vcffile){
if(!require(LDheatmap)) BiocManager::install("LDheatmap")
require(LDheatmap)
name <- basename(vcffile)
title <- sub(".vcf","",name)
gdat_snp <- ttplot::getsnpMat(vcffile)
info <- ttplot::getsnpInfo(vcffile)
snp_dist <- as.numeric(info$POS)
rgb.palette <- colorRampPalette(rev(c("yellow","red")), space="rgb")
MyHeatmap <- LDheatmap(gdat_snp,
genetic.distances = info$POS,
color = grey.colors(20))
myLDheatmap <- LDheatmap(MyHeatmap,
color = rgb.palette(100),
flip = TRUE,
title = paste0("The LDheatmap of ",title))
}
ttplot::getsnpMat("sample1_snp.vcf")
#' Get the snpMatrix from the vcf file (plink format)
#'
#' This function defined to obtain the snpMatrix(with snp ID) from the vcf file
#' @param vcffile The vcf file (plink format).
#' @return The snpMAtrix for the visulization of LDheatmap.
#' @export
#' @examples
#' getsnpMat(vcffile)
getsnpMat <- function(vcffile){
if(!require(vcfR)) BiocManager::install("vcfR")
if(!require(genetics)) BiocManager::install("genetics")
require(vcfR)
require(genetics)
snp_data <- read.vcfR(vcffile, verbose = FALSE)
snp_gt <- snp_data@gt
snp_gt <- as.data.frame(snp_data[,-1])
info <- as.data.frame(snp_data@fix)
info$ID <- paste(info$CHROM,info$POS,sep = "_")
snp_geno <- cbind(info[,c(4,5)],snp_gt)
snp_geno[,1:ncol(snp_genp=o)] <- lapply(snp_geno[,1:ncol(snp_geno)], as.character)
for (i in 1:nrow(snp_geno)){
for (j in 3:ncol(snp_geno)){
if (is.na(snp_data[i,j])){
snp_geno[i,j] <- NA
}else if (snp_geno[i,j]=="0/0"){
snp_geno[i,j] <- paste(snp_geno[i,1],snp_geno[i,1], sep = "/")
}else if (snp_geno[i,j]=="0/1"){
snp_geno[i,j] <- paste(snp_geno[i,1],snp_geno[i,2], sep = "/")
}else if (snp_geno[i,j]=="1/1"){
snp_geno[i,j] <- paste(snp_geno[i,2],snp_geno[i,2], sep = "/")
}
}
}
snpMat <- t(snp_geno[,-c(1,2)])
snpNames <- info$ID
colnames(snpMat) <- snpNames
rownames(snpMat) <- NULL
snpMat <- as.data.frame(snpMat)
for (i in 1:ncol(snpMat)){
snpMat[, i] <- genetics::as.genotype(snpMat[, i])
}
return(snpMat)
}
if(!require(vcfR)) BiocManager::install("vcfR")
if(!require(genetics)) BiocManager::install("genetics")
require(vcfR)
require(genetics)
snp_data <- read.vcfR("sample1_snp.vcf", verbose = FALSE)
snp_gt <- snp_data@gt
snp_gt <- as.data.frame(snp_data[,-1])
info <- as.data.frame(snp_data@fix)
info$ID <- paste(info$CHROM,info$POS,sep = "_")
snp_geno <- cbind(info[,c(4,5)],snp_gt)
snp_geno[,1:ncol(snp_genp=o)] <- lapply(snp_geno[,1:ncol(snp_geno)], as.character)
for (i in 1:nrow(snp_geno)){
for (j in 3:ncol(snp_geno)){
if (is.na(snp_data[i,j])){
snp_geno[i,j] <- NA
}else if (snp_geno[i,j]=="0/0"){
snp_geno[i,j] <- paste(snp_geno[i,1],snp_geno[i,1], sep = "/")
}else if (snp_geno[i,j]=="0/1"){
snp_geno[i,j] <- paste(snp_geno[i,1],snp_geno[i,2], sep = "/")
}else if (snp_geno[i,j]=="1/1"){
snp_geno[i,j] <- paste(snp_geno[i,2],snp_geno[i,2], sep = "/")
}
}
}
if(!require(vcfR)) BiocManager::install("vcfR")
if(!require(genetics)) BiocManager::install("genetics")
require(vcfR)
require(genetics)
snp_data <- read.vcfR("sample1_snp.vcf", verbose = FALSE)
snp_gt <- snp_data@gt
snp_gt <- as.data.frame(snp_gt[,-1])
info <- as.data.frame(snp_data@fix)
info$ID <- paste(info$CHROM,info$POS,sep = "_")
snp_geno <- cbind(info[,c(4,5)],snp_gt)
snp_geno[,1:ncol(snp_genp=o)] <- lapply(snp_geno[,1:ncol(snp_geno)], as.character)
for (i in 1:nrow(snp_geno)){
for (j in 3:ncol(snp_geno)){
if (is.na(snp_data[i,j])){
snp_geno[i,j] <- NA
}else if (snp_geno[i,j]=="0/0"){
snp_geno[i,j] <- paste(snp_geno[i,1],snp_geno[i,1], sep = "/")
}else if (snp_geno[i,j]=="0/1"){
snp_geno[i,j] <- paste(snp_geno[i,1],snp_geno[i,2], sep = "/")
}else if (snp_geno[i,j]=="1/1"){
snp_geno[i,j] <- paste(snp_geno[i,2],snp_geno[i,2], sep = "/")
}
}
}
if(!require(vcfR)) BiocManager::install("vcfR")
if(!require(genetics)) BiocManager::install("genetics")
require(vcfR)
require(genetics)
snp_data <- read.vcfR("sample1_snp.vcf", verbose = FALSE)
snp_gt <- snp_data@gt
snp_gt <- as.data.frame(snp_gt[,-1])
info <- as.data.frame(snp_data@fix)
info$ID <- paste(info$CHROM,info$POS,sep = "_")
snp_geno <- cbind(info[,c(4,5)],snp_gt)
snp_geno[,1:ncol(snp_geno)] <- lapply(snp_geno[,1:ncol(snp_geno)], as.character)
for (i in 1:nrow(snp_geno)){
for (j in 3:ncol(snp_geno)){
if (is.na(snp_data[i,j])){
snp_geno[i,j] <- NA
}else if (snp_geno[i,j]=="0/0"){
snp_geno[i,j] <- paste(snp_geno[i,1],snp_geno[i,1], sep = "/")
}else if (snp_geno[i,j]=="0/1"){
snp_geno[i,j] <- paste(snp_geno[i,1],snp_geno[i,2], sep = "/")
}else if (snp_geno[i,j]=="1/1"){
snp_geno[i,j] <- paste(snp_geno[i,2],snp_geno[i,2], sep = "/")
}
}
}
if(!require(vcfR)) BiocManager::install("vcfR")
if(!require(genetics)) BiocManager::install("genetics")
require(vcfR)
require(genetics)
snp_data <- read.vcfR(vcffile, verbose = FALSE)
snp_gt <- snp_data@gt
snp_gt <- as.data.frame(snp_gt[,-1])
info <- as.data.frame(snp_data@fix)
info$ID <- paste(info$CHROM,info$POS,sep = "_")
snp_geno <- cbind(info[,c(4,5)],snp_gt)
snp_geno[,1:ncol(snp_geno)] <- lapply(snp_geno[,1:ncol(snp_geno)], as.character)
for (i in 1:nrow(snp_geno)){
for (j in 3:ncol(snp_geno)){
if (is.na(snp_data[i,j])){
snp_geno[i,j] <- NA
}else if (snp_geno[i,j]=="0/0"){
snp_geno[i,j] <- paste(snp_geno[i,1],snp_geno[i,1], sep = "/")
}else if (snp_geno[i,j]=="0/1"){
snp_geno[i,j] <- paste(snp_geno[i,1],snp_geno[i,2], sep = "/")
}else if (snp_geno[i,j]=="1/1"){
snp_geno[i,j] <- paste(snp_geno[i,2],snp_geno[i,2], sep = "/")
}
}
}
if(!require(vcfR)) BiocManager::install("vcfR")
if(!require(genetics)) BiocManager::install("genetics")
require(vcfR)
require(genetics)
snp_data <- read.vcfR("sample1_snp.vcf", verbose = FALSE)
snp_gt <- snp_data@gt
snp_gt <- as.data.frame(snp_gt[,-1])
info <- as.data.frame(snp_data@fix)
info$ID <- paste(info$CHROM,info$POS,sep = "_")
snp_geno <- cbind(info[,c(4,5)],snp_gt)
snp_geno[,1:ncol(snp_geno)] <- lapply(snp_geno[,1:ncol(snp_geno)], as.character)
for (i in 1:nrow(snp_geno)){
for (j in 3:ncol(snp_geno)){
if (is.na(snp_data[i,j])){
snp_geno[i,j] <- NA
}else if (snp_geno[i,j]=="0/0"){
snp_geno[i,j] <- paste(snp_geno[i,1],snp_geno[i,1], sep = "/")
}else if (snp_geno[i,j]=="0/1"){
snp_geno[i,j] <- paste(snp_geno[i,1],snp_geno[i,2], sep = "/")
}else if (snp_geno[i,j]=="1/1"){
snp_geno[i,j] <- paste(snp_geno[i,2],snp_geno[i,2], sep = "/")
}
}
}
if(!require(vcfR)) BiocManager::install("vcfR")
if(!require(genetics)) BiocManager::install("genetics")
require(vcfR)
require(genetics)
snp_data <- read.vcfR("sample1_snp.vcf", verbose = FALSE)
snp_gt <- snp_data@gt
snp_gt <- as.data.frame(snp_gt[,-1])
info <- as.data.frame(snp_data@fix)
info$ID <- paste(info$CHROM,info$POS,sep = "_")
snp_geno <- cbind(info[,c(4,5)],snp_gt)
snp_geno[,1:ncol(snp_geno)] <- lapply(snp_geno[,1:ncol(snp_geno)], as.character)
for (i in 1:nrow(snp_geno)){
for (j in 3:ncol(snp_geno)){
if (is.na(snp_geno[i,j])){
snp_geno[i,j] <- NA
}else if (snp_geno[i,j]=="0/0"){
snp_geno[i,j] <- paste(snp_geno[i,1],snp_geno[i,1], sep = "/")
}else if (snp_geno[i,j]=="0/1"){
snp_geno[i,j] <- paste(snp_geno[i,1],snp_geno[i,2], sep = "/")
}else if (snp_geno[i,j]=="1/1"){
snp_geno[i,j] <- paste(snp_geno[i,2],snp_geno[i,2], sep = "/")
}
}
}
class(snp_geno)
snpMat <- t(snp_geno[,-c(1,2)])
class(snpMat)
rm(list=ls())
setwd("ttplot/")
devtools::load_all(".")
devtools::document()
devtools::install_github("YTLogos/ttplot")
getwd()
setw".."
setwd("..")
ttplot::system.file()
ttplot::MyLDheatMap("sample1_snp.vcf")
devtools::load_all("ttplot")
getwd()
remove.packages("ttplot")
devtools::install_github("YTLogos/ttplot")
ttplot::MyLDheatMap("sample1_snp.vcf")
devtools::install_github("YTLogos/ttplot")
ttplot::MyLDheatMap("sample1_snp.vcf")
rm(list = ls())
