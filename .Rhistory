library(tidyverse)
install.packages("stringi")
library(tidyverse)
q()
library("tidyverse", lib.loc="C:/Tools/R-3.5.2/library")
detach("package:tidyverse", unload=TRUE)
rvcheck::update_all()
filter_()
select()
devtools::install_github("hadley/tidyverse")
library(tidyverse)
devtools::install_github("hadley/tidyverse")
BiocManager::install(tidyverse)
BiocManager::install("tidyverse")
devtools::install_github("hadley/tidyverse")
BiocManager::install("tidyverse")
q()
source("https://bioconductor.org/biocLite.R")
if (!requireNamespace("BiocManager"))
install.packages("BiocManager")
BiocManager::install()
rm(list=ls())
ex_vec <- c(4,8,15,16,23,42)
sum <- 0
total <- function(x){
for (i in x){
sum <- sum+i
}
}
total(ex_vec)
ex_vec <- c(4,8,15,16,23,42)
sum <- 0
total <- function(x){
for (i in x){
sum <- sum+i
}
return(sum)
}
total(ex_vec)
if(!require(qqman)){
install.packages("qqman")
library(qqman)
}
library(qqman)
dev.cur()
readLines()
interim_object <- data.frame(rep(1:100, 10),
rep(101:200, 10),
rep(201:300, 10))
object.size(interim_object) # Reports the memory size allocated to the object
rm("interim_object") # Removes only the object itself and not necessarily the memory allotted to it
gc()
library(devtools)
install.packages("roxygen2")
library(roxygen2)
library(vcfR)
install.packages("vcfR")
vcfR::read.vcfR("/mypackages/sample1_snp.vcf")
snp <- vcfR::read.vcfR("/mypackages/sample1_snp.vcf")
snp_gt <- snp@gt
snp_gt <- snp_gt[,-1]
test <- head(snp_gt)
test
class(test)
test[1,4]
info <- as.data.frame(snp@fix)
info$ID <- paste(info$CHROM,info$POS)
head(info)
info$ID <- paste(info$CHROM,info$POS,sep = "_")
head(info)
dsnp_data <- cbind(info[,c(4,5)],snp_gt)
snp_data <- cbind(info[,c(4,5)],snp_gt)
head(snp_data)
snp_data[,1:ncol(snp_data)] <- lapply(snp_data[,1:ncol(snp_data)], as.character)
head(snp_data)
glimpse(snp_data)
for (i in 1:nrow(snp_data)){
for (j in 3:ncol(snp_data)){
if (is.na(snp_data[i,j])){
snp_data[i,j] <- NA
}else if (snp_data[i,j]=="0/0"){
snp_data[i,j] <- paste(snp_data[i,1],snp_data[i,1], sep = "/")
}else if (snp_data[i,j]=="0/1"){
snp_data[i,j] <- paste(snp_data[i,1],snp_data[i,2], sep = "/")
}else if (snp_data[i,j]=="1/1"){
snp_data[i,j] <- paste(snp_data[i,2],snp_data[i,2], sep = "/")
}
}
}
head(snp_data)
t <- t(snp_data)
head(t)
snpMat <- t(snp_data)
info <- snpInfo(vcffile)
snpNames <- info$ID
colnames(snpMat) <- snpNames
for (i in 1:ncol(snpMat)){
snpMat[, i] <- genetics::as.genotype(snpMat[, i])
}
devtools::install_github("YTLogos/ttplot")
setwd()
getwd()
setwd(choose.dir())
setwd()
getwd()
devtools::load_all()
devtools::document()
devtools::install_github("YTLogos/ttplot")
BiocManager::install("snpStats")
devtools::install_github("YTLogos/ttplot")
snpMat <- t(snp_data)
info <- ttplot::snpInfo(vcffile)
snpNames <- info$ID
colnames(snpMat) <- snpNames
for (i in 1:ncol(snpMat)){
snpMat[, i] <- genetics::as.genotype(snpMat[, i])
}
library(ttplot)
head(snp_data)
snpMat <- t(snp_data)
info <- ttplot::snpInfo(vcffile)
snpNames <- info$ID
colnames(snpMat) <- snpNames
for (i in 1:ncol(snpMat)){
snpMat[, i] <- genetics::as.genotype(snpMat[, i])
}
library(ttplot)
remove.packages("ttplot")
snpInfo <- function(file){
if(!require(vcfR)) BiocManager::install("vcfR")
require(vcfR)
snp <- read.vcfR(file,verbose = FALSE)
snp_info <- snp@fix
snp_info <- as.data.frame(snp_info)
snp_info$ID <- paste(snp_info$CHROM, snp_info$POS, sep = "_")
snp_info <- snp_info%>%dplyr::select(ID, POS)
snp_info$POS <- as.integer(as.character(snp_info$POS))
return(snp_info)
}
snpMat <- t(snp_data)
info <- snpInfo("/mypackages/sample1_snp.vcf")
snpNames <- info$ID
colnames(snpMat) <- snpNames
for (i in 1:ncol(snpMat)){
snpMat[, i] <- genetics::as.genotype(snpMat[, i])
}
head(snpMat)
class(snpMat)
View(snpMat)
library(genetics)
as.genotype
?as.genotype
example.data   <- c("D/D","D/I","D/D","I/I","D/D",
"D/D","D/D","D/D","I/I","")
g1  <- genotype(example.data)
g1
head(info)
glimpse(info)
MyHeatmap <- LDheatmap(snpMat, genetic.distances = info$POS,color = grey.colors(20))
rgb.palette <- colorRampPalette(rev(c("yellow","red")), space="rgb")
library(LDheatmap)
MyHeatmap <- LDheatmap(snpMat, genetic.distances = info$POS,color = grey.colors(20))
rgb.palette <- colorRampPalette(rev(c("yellow","red")), space="rgb")
info$POS
glimpse(info)
info$POS <- as.numeric(info$POS)
MyHeatmap <- LDheatmap(snpMat, genetic.distances = info$POS,color = grey.colors(20))
rgb.palette <- colorRampPalette(rev(c("yellow","red")), space="rgb")
rownames(snpMat) <- NULL
MyHeatmap <- LDheatmap(snpMat, genetic.distances = info$POS,color = grey.colors(20))
rgb.palette <- colorRampPalette(rev(c("yellow","red")), space="rgb")
snp_data <- snpMat
test <- read.table("https://raw.githubusercontent.com/YTLogos/myscript/master/data/BnaA02_snp.txt", header = T,check.names = FALSE)
head(test)
for (i in 1:ncol(test)){
test[,i] <- as.genotype(test[,i])
}
View(test)
snp <- read.vcfR("/mypackages/sample1_snp.vcf", verbose = FALSE)
snp_gt <- snp@gt
snp_gt <- as.data.frame(snp_gt[,-1])
info <- as.data.frame(snp@fix)
info$ID <- paste(info$CHROM,info$POS,sep = "_")
snp_data <- cbind(info[,c(4,5)],snp_gt)
snp_data[,1:ncol(snp_data)] <- lapply(snp_data[,1:ncol(snp_data)], as.character)
for (i in 1:nrow(snp_data)){
for (j in 3:ncol(snp_data)){
if (is.na(snp_data[i,j])){
snp_data[i,j] <- NA
}else if (snp_data[i,j]=="0/0"){
snp_data[i,j] <- paste(snp_data[i,1],snp_data[i,1], sep = "/")
}else if (snp_data[i,j]=="0/1"){
snp_data[i,j] <- paste(snp_data[i,1],snp_data[i,2], sep = "/")
}else if (snp_data[i,j]=="1/1"){
snp_data[i,j] <- paste(snp_data[i,2],snp_data[i,2], sep = "/")
}
}
}
View(snp_data)
snp_data <- snp_data[,-c(1,2)]
snpMat <- t(snp_data)
View(snpMat)
snpNames <- info$ID
colnames(snpMat) <- snpNames
for (i in 1:ncol(snpMat)){
snpMat[, i] <- genetics::as.genotype(snpMat[, i])
}
MyHeatmap <- LDheatmap(snpMat, genetic.distances = info$POS,color = grey.colors(20))
rgb.palette <- colorRampPalette(rev(c("yellow","red")), space="rgb")
LDheatmap(snpMat, genetic.distances = info$POS,color = grey.colors(20))
rownames(snpMat) <- NULL
test[1,1]
snp_data[1,1]
snpMat <- t(snp_data)
clas(test)
class(test)
class(snpMat)
f <- as.data.frame(snpMat)
View(f)
colnames(f) <- snpNames
rownames(f) <- NULL
class(test)
test[1,1]
test[1,3]
f[1,2]
f1 <- f
for (i in 1:ncol(f1)){
f1[, i] <- genetics::as.genotype(f1[, i])
}
f1[1,1]
LDheatmap(f1, genetic.distances = info$POS,color = grey.colors(20))
dist <- info$POS
class(dist)
dist <- as.vector(dist)
class(dist)
head(dist)
dist <- as.numeric(dist)
head(dist)
LDheatmap(f1, genetic.distances = dist,color = grey.colors(20))
rgb.palette <- colorRampPalette(rev(c("yellow","red")), space="rgb")
l <- LDheatmap(f1, genetic.distances = dist,color = grey.colors(20))
LDheatmap(l,color = rgb.palette(100), flip = TRUE)
snpMat <- function(vcffile){
if(!require(vcfR)) BiocManager::install("vcfR")
if(!require(snpStats)) BiocManager::install("snpStats")
if(!require(genetics)) BiocManager::install("genetics")
require(vcfR)
require(snpStats)
snp <- read.vcfR(vcffile, verbose = FALSE)
snp_gt <- snp@gt
snp_gt <- as.data.frame(snp_gt[,-1])
info <- as.data.frame(snp@fix)
info$ID <- paste(info$CHROM,info$POS,sep = "_")
snp_data <- cbind(info[,c(4,5)],snp_gt)
snp_data[,1:ncol(snp_data)] <- lapply(snp_data[,1:ncol(snp_data)], as.character)
for (i in 1:nrow(snp_data)){
for (j in 3:ncol(snp_data)){
if (is.na(snp_data[i,j])){
snp_data[i,j] <- NA
}else if (snp_data[i,j]=="0/0"){
snp_data[i,j] <- paste(snp_data[i,1],snp_data[i,1], sep = "/")
}else if (snp_data[i,j]=="0/1"){
snp_data[i,j] <- paste(snp_data[i,1],snp_data[i,2], sep = "/")
}else if (snp_data[i,j]=="1/1"){
snp_data[i,j] <- paste(snp_data[i,2],snp_data[i,2], sep = "/")
}
}
}
snpMat <- t(snp_data[,-c(1,2)])
info <- snpInfo(vcffile)
snpNames <- info$ID
colnames(snpMat) <- snpNames
rownames(snpMat) <- NULL
snpMat <- as.data.frame(snpMat)
for (i in 1:ncol(snpMat)){
snpMat[, i] <- genetics::as.genotype(snpMat[, i])
}
return(snpMat)
}
snpInfo()
snpInfo
snpMat <- function(vcffile){
if(!require(vcfR)) BiocManager::install("vcfR")
if(!require(snpStats)) BiocManager::install("snpStats")
if(!require(genetics)) BiocManager::install("genetics")
require(vcfR)
require(snpStats)
snp <- read.vcfR(vcffile, verbose = FALSE)
snp_gt <- snp@gt
snp_gt <- as.data.frame(snp_gt[,-1])
info <- as.data.frame(snp@fix)
info$ID <- paste(info$CHROM,info$POS,sep = "_")
snp_data <- cbind(info[,c(4,5)],snp_gt)
snp_data[,1:ncol(snp_data)] <- lapply(snp_data[,1:ncol(snp_data)], as.character)
for (i in 1:nrow(snp_data)){
for (j in 3:ncol(snp_data)){
if (is.na(snp_data[i,j])){
snp_data[i,j] <- NA
}else if (snp_data[i,j]=="0/0"){
snp_data[i,j] <- paste(snp_data[i,1],snp_data[i,1], sep = "/")
}else if (snp_data[i,j]=="0/1"){
snp_data[i,j] <- paste(snp_data[i,1],snp_data[i,2], sep = "/")
}else if (snp_data[i,j]=="1/1"){
snp_data[i,j] <- paste(snp_data[i,2],snp_data[i,2], sep = "/")
}
}
}
snpMat <- t(snp_data[,-c(1,2)])
info <- snpInfo(vcffile)
snpNames <- info$ID
colnames(snpMat) <- snpNames
rownames(snpMat) <- NULL
snpMat <- as.data.frame(snpMat)
for (i in 1:ncol(snpMat)){
snpMat[, i] <- genetics::as.genotype(snpMat[, i])
}
return(snpMat)
}
snp <- read.vcfR("/mypackages/sample1_snp.vcf", verbose = FALSE)
snp_gt <- snp@gt
snp_gt <- as.data.frame(snp_gt[,-1])
info <- as.data.frame(snp@fix)
info$ID <- paste(info$CHROM,info$POS,sep = "_")
snp_data <- cbind(info[,c(4,5)],snp_gt)
snp_data[,1:ncol(snp_data)] <- lapply(snp_data[,1:ncol(snp_data)], as.character)
for (i in 1:nrow(snp_data)){
for (j in 3:ncol(snp_data)){
if (is.na(snp_data[i,j])){
snp_data[i,j] <- NA
}else if (snp_data[i,j]=="0/0"){
snp_data[i,j] <- paste(snp_data[i,1],snp_data[i,1], sep = "/")
}else if (snp_data[i,j]=="0/1"){
snp_data[i,j] <- paste(snp_data[i,1],snp_data[i,2], sep = "/")
}else if (snp_data[i,j]=="1/1"){
snp_data[i,j] <- paste(snp_data[i,2],snp_data[i,2], sep = "/")
}
}
}
snpMat <- t(snp_data[,-c(1,2)])
info <- snpInfo("/mypackages/sample1_snp.vcf")
snpNames <- info$ID
colnames(snpMat) <- snpNames
rownames(snpMat) <- NULL
snpMat <- as.data.frame(snpMat)
for (i in 1:ncol(snpMat)){
snpMat[, i] <- genetics::as.genotype(snpMat[, i])
}
snpMat[2,3]
#' Get the snpMatrix from the vcf file (plink format)
#'
#' This function defined to obtain the snpMatrix(with snp ID) from the vcf file
#' @param vcffile The vcf file (plink format).
#' @return The snpMAtrix for the visulization of LDheatmap.
#' @export
#' @examples
#' snpMat(vcffile)
snpMat <- function(vcffile){
if(!require(vcfR)) BiocManager::install("vcfR")
if(!require(snpStats)) BiocManager::install("snpStats")
if(!require(genetics)) BiocManager::install("genetics")
require(vcfR)
require(snpStats)
snp <- read.vcfR(vcffile, verbose = FALSE)
snp_gt <- snp@gt
snp_gt <- as.data.frame(snp_gt[,-1])
info <- as.data.frame(snp@fix)
info$ID <- paste(info$CHROM,info$POS,sep = "_")
snp_data <- cbind(info[,c(4,5)],snp_gt)
snp_data[,1:ncol(snp_data)] <- lapply(snp_data[,1:ncol(snp_data)], as.character)
for (i in 1:nrow(snp_data)){
for (j in 3:ncol(snp_data)){
if (is.na(snp_data[i,j])){
snp_data[i,j] <- NA
}else if (snp_data[i,j]=="0/0"){
snp_data[i,j] <- paste(snp_data[i,1],snp_data[i,1], sep = "/")
}else if (snp_data[i,j]=="0/1"){
snp_data[i,j] <- paste(snp_data[i,1],snp_data[i,2], sep = "/")
}else if (snp_data[i,j]=="1/1"){
snp_data[i,j] <- paste(snp_data[i,2],snp_data[i,2], sep = "/")
}
}
}
snpMat <- t(snp_data[,-c(1,2)])
info <- snpInfo(vcffile)
snpNames <- info$ID
colnames(snpMat) <- snpNames
rownames(snpMat) <- NULL
snpMat <- as.data.frame(snpMat)
for (i in 1:ncol(snpMat)){
snpMat[, i] <- genetics::as.genotype(snpMat[, i])
}
return(snpMat)
}
rm(list=ls())
#' Get the snpMatrix from the vcf file (plink format)
#'
#' This function defined to obtain the snpMatrix(with snp ID) from the vcf file
#' @param vcffile The vcf file (plink format).
#' @return The snpMAtrix for the visulization of LDheatmap.
#' @export
#' @examples
#' snpMat(vcffile)
snpMat <- function(vcffile){
if(!require(vcfR)) BiocManager::install("vcfR")
if(!require(snpStats)) BiocManager::install("snpStats")
if(!require(genetics)) BiocManager::install("genetics")
require(vcfR)
require(snpStats)
snp_data <- read.vcfR(vcffile, verbose = FALSE)
snp_gt <- snp_data@gt
snp_gt <- as.data.frame(snp_data[,-1])
info <- as.data.frame(snp_data@fix)
info$ID <- paste(info$CHROM,info$POS,sep = "_")
snp_geno <- cbind(info[,c(4,5)],snp_gt)
snp_geno[,1:ncol(snp_genp=o)] <- lapply(snp_geno[,1:ncol(snp_geno)], as.character)
for (i in 1:nrow(snp_geno)){
for (j in 3:ncol(snp_geno)){
if (is.na(snp_data[i,j])){
snp_geno[i,j] <- NA
}else if (snp_geno[i,j]=="0/0"){
snp_geno[i,j] <- paste(snp_geno[i,1],snp_geno[i,1], sep = "/")
}else if (snp_geno[i,j]=="0/1"){
snp_geno[i,j] <- paste(snp_geno[i,1],snp_geno[i,2], sep = "/")
}else if (snp_geno[i,j]=="1/1"){
snp_geno[i,j] <- paste(snp_geno[i,2],snp_geno[i,2], sep = "/")
}
}
}
snpMat <- t(snp_geno[,-c(1,2)])
snpNames <- info$ID
colnames(snpMat) <- snpNames
rownames(snpMat) <- NULL
snpMat <- as.data.frame(snpMat)
for (i in 1:ncol(snpMat)){
snpMat[, i] <- genetics::as.genotype(snpMat[, i])
}
return(snpMat)
}
#' Get the snpMatrix from the vcf file (plink format)
#'
#' This function defined to obtain the snpMatrix(with snp ID) from the vcf file
#' @param vcffile The vcf file (plink format).
#' @return The snpMAtrix for the visulization of LDheatmap.
#' @export
#' @examples
#' getsnpMat(vcffile)
getsnpMat <- function(vcffile){
if(!require(vcfR)) BiocManager::install("vcfR")
if(!require(snpStats)) BiocManager::install("snpStats")
if(!require(genetics)) BiocManager::install("genetics")
require(vcfR)
require(snpStats)
snp_data <- read.vcfR(vcffile, verbose = FALSE)
snp_gt <- snp_data@gt
snp_gt <- as.data.frame(snp_data[,-1])
info <- as.data.frame(snp_data@fix)
info$ID <- paste(info$CHROM,info$POS,sep = "_")
snp_geno <- cbind(info[,c(4,5)],snp_gt)
snp_geno[,1:ncol(snp_genp=o)] <- lapply(snp_geno[,1:ncol(snp_geno)], as.character)
for (i in 1:nrow(snp_geno)){
for (j in 3:ncol(snp_geno)){
if (is.na(snp_data[i,j])){
snp_geno[i,j] <- NA
}else if (snp_geno[i,j]=="0/0"){
snp_geno[i,j] <- paste(snp_geno[i,1],snp_geno[i,1], sep = "/")
}else if (snp_geno[i,j]=="0/1"){
snp_geno[i,j] <- paste(snp_geno[i,1],snp_geno[i,2], sep = "/")
}else if (snp_geno[i,j]=="1/1"){
snp_geno[i,j] <- paste(snp_geno[i,2],snp_geno[i,2], sep = "/")
}
}
}
snpMat <- t(snp_geno[,-c(1,2)])
snpNames <- info$ID
colnames(snpMat) <- snpNames
rownames(snpMat) <- NULL
snpMat <- as.data.frame(snpMat)
for (i in 1:ncol(snpMat)){
snpMat[, i] <- genetics::as.genotype(snpMat[, i])
}
return(snpMat)
}
#' Get the LDhaetmap from the vcf file (plink format)
#'
#' This function defined to obtain the LDheatmap from the vcf file directly.
#' @param vcffile The plink format vcf file.
#' @return the LDheatmap.
#' @export
#' @examples
#' MyLDheatMap(vcffile)
MyLDheatMap <- function(vcffile){
if(!require(LDheatmap)) BiocManager::install("LDheatmap")
require(LDheatmap)
name <- basename(vcffile)
title <- sub(".vcf","",name)
gdat_snp <- ttplot::getsnpMat(vcffile)
info <- ttplot::snpInfo(vcffile)
snp_dist <- as.numeric(as.character(info$POS))
rgb.palette <- colorRampPalette(rev(c("yellow","red")), space="rgb")
MyHeatmap <- LDheatmap(gdat_snp,
genetic.distances = info$POS,
color = grey.colors(20))
myLDheatmap <- LDheatmap(MyHeatmap,
color = rgb.palette(100),
flip = TRUE,
title = paste0("The LDheatmap of ",title))
}
getwd()
devtools::load_all(".")
devtools::document()
remove.packages("ttplot")
q()
